1.Array.from(); //将类数组转化成数组
  let arr = Array.from({'0':1,'1':2,length:2});
  console.log(arr);//[1,2]


2.Array.of(); //创建数组
  Array.of(2,3); //[2,3]


3.Array.fill();//填充数组


4.Array.reduce();//传入回调适合处理 临近数组元素
  [1, 2, 3, 4, 5].reduce((prev, next, index, current) => {
      //prev 如果reduce传入第二个参数，prev为第二个参数；否则prev为数组第一个元素  往后累加
      //next 如果reduce传入第二个参数，next为第数组第一个元素；否则next为数组第二个元素  依次累加
      //index 函数第几次执行1开始
      //current当前数组
      return prev + next;
  })
  //reduce方法简单实现
  Array.prototype.myReduce = function (cb, pre) {
      let prev = pre || this[0];
      for (var i = pre ? 0 : 1; i < this.length; i++) {
          prev = cb(prev, this[i], i, this);
      }
      return prev;
  }
  
  
5.Array.filter();//数组过滤
  let result = [1,2,3,4,5].filter(function(item){
      return item>3;
  })
  console.log(result);//[4,5]
  //filter简单实现
  Array.prototype.myFilter = function(cb){
      var arr = [];
      for(var i=0; i<this.length; i++){
          var item = this[i];
          if( cb(item) ) arr.push(item);
      }
      return arr;
  }


6.Array.find();//查找返回值
  Array.findIndex()
  let result = [1,1,1,2,3].find(function(item){
      return item == 2;
  })
  console.log(result);//2


7.Array.includes();//判断数组是否有某值

8.Object.keys(arr)

9.arr.values()

10.arr.IndexOf('xxx')
